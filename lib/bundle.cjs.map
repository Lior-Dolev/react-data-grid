{"version":3,"file":"bundle.cjs","sources":["../src/hooks/useCombinedRefs.ts","../src/hooks/useClickOutside.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/utils/domUtils.ts","../src/Columns.tsx","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/hooks/useLatestFunc.ts","../src/headerCells/SortableHeaderCell.tsx","../src/HeaderCell.tsx","../src/utils/columnUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/HeaderRow.tsx","../src/FilterRow.tsx","../src/Cell.tsx","../src/editors/EditorContainer.tsx","../src/EditCell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["import { useCallback } from 'react';\n\nexport function useCombinedRefs<T>(...refs: readonly React.Ref<T>[]) {\n  return useCallback(\n    (handle: T | null) => {\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(handle);\n        } else if (ref !== null) {\n          // @ts-expect-error: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n          ref.current = handle;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","import { useRef, useEffect } from 'react';\n\n/**\n * Detecting outside click on a react component is surprisingly hard.\n * A general approach is to have a global click handler on the document\n * which checks if the click target is inside the editor container or\n * not using editorContainer.contains(e.target). This approach works well\n * until portals are used for editors. Portals render children into a DOM\n * node that exists outside the DOM hierarchy of the parent component so\n * editorContainer.contains(e.target) does not work. Here are some examples\n * of the DOM structure with different types of editors\n *\n *\n * SimpleEditor for example Texbox (No Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        <div simple-editor>..</div>\n *      </div>\n *   </div>\n *\n * ComplexEditor for example Modals (using Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        // Nothing here\n *      </div>\n *   </div>\n *   <div portal-created-by-the-editor>\n *     <div complex-editor>..</div>\n *   </div>\n *\n *\n * One approach to detect outside click is to use synthetic event bubbling through\n * portals. An event fired from inside a portal will propagate to ancestors\n * in the containing React tree, even if those elements are not ancestors\n * in the DOM tree. This means a click handler can be attached on the window\n * and on the editor container. The editor container can set a flag to notify\n * that the click was inside the editor and the window click handler can use\n * this flag to call onClickOutside. This approach however has a few caveats\n * - Click handler on the window is set using window.addEventListener\n * - Click handler on the editor container is set using onClick prop\n *\n * This means if a child component inside the editor calls e.stopPropagation\n * then the click handler on the editor container will not be called whereas\n * the document click handler will be called.\n * https://github.com/facebook/react/issues/12518\n *\n * To solve this issue onClickCapture event is used.\n */\n\nexport function useClickOutside(onClick: () => void) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  function cancelAnimationFrameRequest() {\n    if (typeof frameRequestRef.current === 'number') {\n      cancelAnimationFrame(frameRequestRef.current);\n      frameRequestRef.current = undefined;\n    }\n  }\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `handleDocumentClick` might otherwise miss valid click events.\n  // To that end we instead access the latest `onClick` prop via a ref.\n  const onClickRef = useRef((): void => {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n\n  useEffect(() => {\n    onClickRef.current = onClick;\n  });\n\n  useEffect(() => {\n    function onOutsideClick() {\n      frameRequestRef.current = undefined;\n      onClickRef.current();\n    }\n\n    function onWindowCaptureClick() {\n      cancelAnimationFrameRequest();\n      frameRequestRef.current = requestAnimationFrame(onOutsideClick);\n    }\n\n    window.addEventListener('click', onWindowCaptureClick, { capture: true });\n\n    return () => {\n      window.removeEventListener('click', onWindowCaptureClick, { capture: true });\n      cancelAnimationFrameRequest();\n    };\n  }, []);\n\n  return cancelAnimationFrameRequest;\n}\n","import { useRef, useState, useLayoutEffect } from 'react';\n\n// https://github.com/microsoft/TypeScript/issues/37861\ninterface ResizeObserverEntry {\n  contentRect: {\n    width: number;\n    height: number;\n  };\n}\n\ntype ResizeObserver = new (callback: (entries: readonly ResizeObserverEntry[]) => void) => {\n  observe: (target: Element) => void;\n  disconnect: () => void;\n};\n\nexport function useGridDimensions(): [React.RefObject<HTMLDivElement>, number, number] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window as typeof window & { ResizeObserver: ResizeObserver };\n\n    // don't break in jest/jsdom and browsers that don't support ResizeObserver\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(entries => {\n      const { width, height } = entries[0].contentRect;\n      setGridWidth(width);\n      setGridHeight(height);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useLayoutEffect } from 'react';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isCellSelected: boolean | undefined) {\n  const ref = useRef<T>(null);\n  useLayoutEffect(() => {\n    if (!isCellSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isCellSelected]);\n\n  return ref;\n}\n","import clsx from 'clsx';\n\nimport { useFocusRef } from '../hooks/useFocusRef';\n\ntype SharedInputProps = Pick<React.InputHTMLAttributes<HTMLInputElement>,\n  | 'disabled'\n  | 'tabIndex'\n  | 'onClick'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected?: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const inputRef = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx('rdg-checkbox-label', { 'rdg-checkbox-label-disabled': disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        tabIndex={tabIndex}\n        ref={inputRef}\n        type=\"checkbox\"\n        className=\"rdg-checkbox-input\"\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className=\"rdg-checkbox\" />\n    </label>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const cellRef = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={cellRef}\n      className=\"rdg-group-cell-content\"\n      tabIndex={-1}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className=\"rdg-caret\">\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function wrapEvent<E extends React.SyntheticEvent>(ourHandler: React.EventHandler<E>, theirHandler: React.EventHandler<E> | undefined) {\n  if (theirHandler === undefined) return ourHandler;\n\n  return function(event: E) {\n    ourHandler(event);\n    theirHandler(event);\n  };\n}\n","import { SelectCellFormatter } from './formatters';\nimport type { Column } from './types';\nimport { stopPropagation } from './utils/domUtils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onClick={stopPropagation}\n        onChange={props.onRowSelectionChange}\n      />\n    );\n  },\n  groupFormatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select Group\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onChange={props.onRowSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  }\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\n\ninterface ViewportColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy?: readonly string[];\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n}\n\nexport function useViewportColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy\n}: ViewportColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, lastFrozenColumnIndex, totalColumnWidth, totalFrozenColumnWidth, groupBy } = useMemo(() => {\n    let left = 0;\n    let totalWidth = 0;\n    let allocatedWidths = 0;\n    let unassignedColumnsCount = 0;\n    let lastFrozenColumnIndex = -1;\n    type IntermediateColumn = Column<R, SR> & { width: number | undefined; rowGroup?: boolean };\n    let totalFrozenColumnWidth = 0;\n\n    const columns = rawColumns.map(metricsColumn => {\n      let width = getSpecifiedWidth(metricsColumn, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, metricsColumn, minColumnWidth);\n        allocatedWidths += width;\n      }\n\n      const column: IntermediateColumn = { ...metricsColumn, width };\n\n      if (rawGroupBy?.includes(column.key)) {\n        column.frozen = true;\n        column.rowGroup = true;\n      }\n\n      if (column.frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const unallocatedWidth = viewportWidth - allocatedWidths;\n    const unallocatedColumnWidth = Math.max(\n      Math.floor(unallocatedWidth / unassignedColumnsCount),\n      minColumnWidth\n    );\n\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    const calculatedColumns: CalculatedColumn<R, SR>[] = columns.map((column, idx) => {\n      // Every column should have a valid width as this stage\n      const width = column.width ?? clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n      const newColumn = {\n        ...column,\n        idx,\n        width,\n        left,\n        sortable: column.sortable ?? defaultSortable,\n        resizable: column.resizable ?? defaultResizable,\n        formatter: column.formatter ?? defaultFormatter\n      };\n\n      if (newColumn.rowGroup) {\n        groupBy.push(column.key);\n        newColumn.groupFormatter = column.groupFormatter ?? ToggleGroupFormatter;\n      }\n\n      totalWidth += width;\n      left += width;\n      return newColumn;\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      const lastFrozenColumn = calculatedColumns[lastFrozenColumnIndex];\n      lastFrozenColumn.isLastFrozenColumn = true;\n      totalFrozenColumnWidth = lastFrozenColumn.left + lastFrozenColumn.width;\n    }\n\n    return {\n      columns: calculatedColumns,\n      lastFrozenColumnIndex,\n      totalFrozenColumnWidth,\n      totalColumnWidth: totalWidth,\n      groupBy\n    };\n  }, [columnWidths, defaultFormatter, defaultResizable, defaultSortable, minColumnWidth, rawColumns, rawGroupBy, viewportWidth]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = Math.min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columns[colVisibleStartIdx];\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columns[colVisibleEndIdx];\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = Math.max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = Math.min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth]);\n\n  const viewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < colOverscanStartIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [colOverscanEndIdx, colOverscanStartIdx, columns]);\n\n  return { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return Math.floor(viewportWidth * parseInt(width, 10) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = Math.max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return Math.min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\nimport type { GroupRow, GroupByDictionary } from '../types';\n\nconst RENDER_BACTCH_SIZE = 8;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number;\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || !rowGrouper) return [undefined, rawRows.length];\n\n    const groupRows = (rows: readonly R[], [groupByKey, ...remainingGroupByKeys]: readonly string[], startRowIndex: number): [GroupByDictionary<R>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0\n          ? [childRows, childRows.length]\n          : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, allGroupRows] = useMemo(() => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, allGroupRows];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (rows: GroupByDictionary<R> | readonly R[], parentId: string | undefined, level: number): void => {\n      if (Array.isArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = (rows as GroupByDictionary<R>)[groupKey]; // TODO (ts4.1): https://github.com/microsoft/TypeScript/issues/17002\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, allGroupRows];\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const isGroupRow = <R>(row: unknown): row is GroupRow<R> => allGroupRows.has(row);\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = Math.floor(scrollTop / rowHeight);\n  const rowVisibleEndIdx = Math.min(rows.length - 1, Math.floor((scrollTop + clientHeight) / rowHeight));\n  const rowOverscanStartIdx = Math.max(0, Math.floor((rowVisibleStartIdx - overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n  const rowOverscanEndIdx = Math.min(rows.length - 1, Math.ceil((rowVisibleEndIdx + overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    isGroupRow\n  };\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import type { HeaderCellProps } from '../HeaderCell';\nimport type { SortDirection } from '../enums';\n\nconst SORT_TEXT = {\n  ASC: '\\u25B2',\n  DESC: '\\u25BC',\n  NONE: ''\n} as const;\n\ntype SharedHeaderCellProps<R, SR> = Pick<HeaderCellProps<R, SR>,\n  | 'column'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  column,\n  onSort,\n  sortColumn,\n  sortDirection,\n  children\n}: Props<R, SR>) {\n  sortDirection = sortColumn === column.key && sortDirection || 'NONE';\n  function onClick() {\n    if (!onSort) return;\n    const { sortDescendingFirst } = column;\n    let direction: SortDirection;\n    switch (sortDirection) {\n      case 'ASC':\n        direction = sortDescendingFirst ? 'NONE' : 'DESC';\n        break;\n      case 'DESC':\n        direction = sortDescendingFirst ? 'ASC' : 'NONE';\n        break;\n      default:\n        direction = sortDescendingFirst ? 'DESC' : 'ASC';\n        break;\n    }\n    onSort(column.key, direction);\n  }\n\n  return (\n    <span className=\"rdg-header-sort-cell\" onClick={onClick}>\n      <span className=\"rdg-header-sort-name\">{children}</span>\n      <span>{SORT_TEXT[sortDirection]}</span>\n    </span>\n  );\n}\n","import clsx from 'clsx';\n\nimport type { CalculatedColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport type { SortDirection } from './enums';\n\nfunction getAriaSort(sortDirection?: SortDirection) {\n  switch (sortDirection) {\n    case 'ASC':\n      return 'ascending';\n    case 'DESC':\n      return 'descending';\n    default:\n      return 'none';\n  }\n}\n\ntype SharedHeaderRowProps<R, SR> = Pick<HeaderRowProps<R, SR>,\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'allRowsSelected'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderCellProps<R, SR>) {\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      if (event.pointerType === 'mouse' && event.buttons !== 1) {\n        onPointerUp();\n        return;\n      }\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onResize(column, width);\n      }\n    }\n\n    function onPointerUp() {\n      if (event.pointerId !== pointerId) return;\n      window.removeEventListener('pointermove', onPointerMove);\n      window.removeEventListener('pointerup', onPointerUp);\n    }\n\n    event.preventDefault();\n    window.addEventListener('pointermove', onPointerMove);\n    window.addEventListener('pointerup', onPointerUp);\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          column={column}\n          onSort={onSort}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  const className = clsx('rdg-cell', column.headerCellClass, {\n    'rdg-cell-resizable': column.resizable,\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.isLastFrozenColumn\n  });\n  const style: React.CSSProperties = {\n    width: column.width,\n    left: column.left\n  };\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={sortColumn === column.key ? getAriaSort(sortDirection) : undefined}\n      className={className}\n      style={style}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport function getColumnScrollPosition<R, SR>(columns: readonly CalculatedColumn<R, SR>[], idx: number, currentScrollLeft: number, currentClientWidth: number): number {\n  let left = 0;\n  let frozen = 0;\n\n  for (let i = 0; i < idx; i++) {\n    const column = columns[i];\n    if (column) {\n      if (column.width) {\n        left += column.width;\n      }\n      if (column.frozen) {\n        frozen += column.width;\n      }\n    }\n  }\n\n  const selectedColumn = columns[idx];\n  if (selectedColumn) {\n    const scrollLeft = left - frozen - currentScrollLeft;\n    const scrollRight = left + selectedColumn.width - currentScrollLeft;\n\n    if (scrollLeft < 0) {\n      return scrollLeft;\n    }\n    if (scrollRight > currentClientWidth) {\n      return scrollRight - currentClientWidth;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.matches('.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child');\n  }\n  return false;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n","import type { CellNavigationMode } from '../enums';\nimport type { CalculatedColumn, Position, GroupRow } from '../types';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({ selectedPosition, columns, rows, isGroupRow }: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return column.editor != null\n    && !column.rowGroup\n    && !isGroupRow(row)\n    && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  nextPosition: Position;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({ cellNavigationMode, columns, rowsCount, nextPosition }: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  if (cellNavigationMode !== 'NONE') {\n    const { idx, rowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          return {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: 0\n        };\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          return {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n  }\n\n  return nextPosition;\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid<R, SR>({ cellNavigationMode, columns, rowsCount, selectedPosition: { rowIdx, idx }, shiftKey }: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","export * from './domUtils';\nexport * from './columnUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport function assertIsValidKeyGetter<R>(keyGetter: unknown): asserts keyGetter is (row: R) => React.Key {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n","import { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { assertIsValidKeyGetter } from './utils';\nimport type { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKeyGetter'\n>;\n\nexport interface HeaderRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nfunction HeaderRow<R, SR>({\n  columns,\n  rows,\n  rowKeyGetter,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderRowProps<R, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n\n    const newSelectedRows = new Set<React.Key>();\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(rowKeyGetter(row));\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKeyGetter]);\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className=\"rdg-header-row\"\n    >\n      {columns.map(column => {\n        return (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            onResize={onColumnResize}\n            allRowsSelected={allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR>(props: HeaderRowProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, Filters } from './types';\nimport type { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'filters'\n  | 'onFiltersChange'\n>;\n\ninterface FilterRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n}\n\nfunction FilterRow<R, SR>({\n  columns,\n  filters,\n  onFiltersChange\n}: FilterRowProps<R, SR>) {\n  function onChange(key: string, value: unknown) {\n    const newFilters: Filters = { ...filters };\n    newFilters[key] = value;\n    onFiltersChange?.(newFilters);\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={2}\n      className=\"rdg-filter-row\"\n    >\n      {columns.map(column => {\n        const { key } = column;\n\n        const className = clsx('rdg-cell', {\n          'rdg-cell-frozen': column.frozen,\n          'rdg-cell-frozen-last': column.isLastFrozenColumn\n        });\n        const style: React.CSSProperties = {\n          width: column.width,\n          left: column.left\n        };\n\n        return (\n          <div\n            key={key}\n            style={style}\n            className={className}\n          >\n            {column.filterRenderer && (\n              <column.filterRenderer\n                column={column}\n                value={filters?.[column.key]}\n                onChange={value => onChange(key, value)}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(FilterRow) as <R, SR>(props: FilterRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport type { CellRendererProps } from './types';\nimport { wrapEvent } from './utils';\nimport { useCombinedRefs } from './hooks';\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  isRowSelected,\n  row,\n  rowIdx,\n  dragHandleProps,\n  onRowClick,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  selectRow,\n  ...props\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const cellRef = useRef<HTMLDivElement>(null);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn,\n      'rdg-cell-selected': isCellSelected,\n      'rdg-cell-copied': isCopied,\n      'rdg-cell-dragged-over': isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ idx: column.idx, rowIdx }, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(rowIdx, row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(rowIdx, newRow);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      ref={useCombinedRefs(cellRef, ref)}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      onClick={wrapEvent(handleClick, onClick)}\n      onDoubleClick={wrapEvent(handleDoubleClick, onDoubleClick)}\n      onContextMenu={wrapEvent(handleContextMenu, onContextMenu)}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            rowIdx={rowIdx}\n            row={row}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            onRowSelectionChange={onRowSelectionChange}\n            onRowChange={handleRowChange}\n          />\n          {dragHandleProps && (\n            <div className=\"rdg-cell-drag-handle\" {...dragHandleProps} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import { createPortal } from 'react-dom';\n\nimport type { EditorProps } from '../types';\nimport { useClickOutside } from '../hooks';\n\nexport default function EditorContainer<R, SR>({\n  row,\n  column,\n  onRowChange,\n  ...props\n}: EditorProps<R, SR>) {\n  const onClickCapture = useClickOutside(() => onRowChange(row, true));\n  if (column.editor === undefined) return null;\n\n  const editor = (\n    <div className=\"rdg-editor-container\" onClickCapture={onClickCapture}>\n      <column.editor\n        row={row}\n        column={column}\n        onRowChange={onRowChange}\n        {...props}\n      />\n    </div>\n  );\n\n  if (column.editorOptions?.createPortal) {\n    return createPortal(editor, props.editorPortalTarget);\n  }\n\n  return editor;\n}\n","import { useState, useCallback } from 'react';\nimport clsx from 'clsx';\n\nimport EditorContainer from './editors/EditorContainer';\nimport type { CellRendererProps, SharedEditorProps, Omit } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>,\n  | 'rowIdx'\n  | 'row'\n  | 'column'\n>;\n\ninterface EditCellProps<R, SR> extends SharedCellRendererProps<R, SR>, Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  editorProps: SharedEditorProps<R>;\n}\n\nexport default function EditCell<R, SR>({\n  className,\n  column,\n  row,\n  rowIdx,\n  editorProps,\n  ...props\n}: EditCellProps<R, SR>) {\n  const [dimensions, setDimensions] = useState<{ left: number; top: number } | null>(null);\n\n  const cellRef = useCallback(node => {\n    if (node !== null) {\n      const { left, top } = node.getBoundingClientRect();\n      setDimensions({ left, top });\n    }\n  }, []);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    'rdg-cell-selected',\n    'rdg-cell-editing',\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function getCellContent() {\n    if (dimensions === null) return;\n    const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement ?? document.documentElement;\n    const { left, top } = dimensions;\n    const gridLeft = left + docLeft;\n    const gridTop = top + docTop;\n\n    return (\n      <EditorContainer\n        {...editorProps}\n        rowIdx={rowIdx}\n        column={column}\n        left={gridLeft}\n        top={gridTop}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected\n      ref={cellRef}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      {...props}\n    >\n      {getCellContent()}\n    </div>\n  );\n}\n","import { memo, forwardRef } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport type { RowRendererProps, SelectedCellProps } from './types';\nimport { wrapEvent } from './utils';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  rowIdx,\n  isRowSelected,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  row,\n  viewportColumns,\n  selectedCellProps,\n  onRowClick,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  top,\n  onRowChange,\n  selectCell,\n  selectRow,\n  'aria-rowindex': ariaRowIndex,\n  'aria-selected': ariaSelected,\n  ...props\n}: RowRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function handleDragEnter() {\n    setDraggedOverRowIdx?.(rowIdx);\n  }\n\n  className = clsx(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n      'rdg-row-selected': isRowSelected,\n      'rdg-group-row-selected': selectedCellProps?.idx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      aria-selected={ariaSelected}\n      ref={ref}\n      className={className}\n      onMouseEnter={wrapEvent(handleDragEnter, onMouseEnter)}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => {\n        const isCellSelected = selectedCellProps?.idx === column.idx;\n        if (selectedCellProps?.mode === 'EDIT' && isCellSelected) {\n          return (\n            <EditCell<R, SR>\n              key={column.key}\n              rowIdx={rowIdx}\n              column={column}\n              row={row}\n              onKeyDown={selectedCellProps.onKeyDown}\n              editorProps={selectedCellProps.editorProps}\n            />\n          );\n        }\n\n        return (\n          <CellRenderer\n            key={column.key}\n            rowIdx={rowIdx}\n            column={column}\n            row={row}\n            isCopied={copiedCellIdx === column.idx}\n            isDraggedOver={draggedOverCellIdx === column.idx}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            dragHandleProps={isCellSelected ? (selectedCellProps as SelectedCellProps).dragHandleProps : undefined}\n            onFocus={isCellSelected ? (selectedCellProps as SelectedCellProps).onFocus : undefined}\n            onKeyDown={isCellSelected ? selectedCellProps!.onKeyDown : undefined}\n            onRowClick={onRowClick}\n            onRowChange={onRowChange}\n            selectCell={selectCell}\n            selectRow={selectRow}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR = unknown>(props: RowRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<GroupRowRendererProps<R, SR>,\n  | 'id'\n  | 'rowIdx'\n  | 'groupKey'\n  | 'childRows'\n  | 'isExpanded'\n  | 'isRowSelected'\n  | 'selectRow'\n  | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  rowIdx,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  isRowSelected,\n  column,\n  groupColumnIndex,\n  selectRow,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  function onRowSelectionChange(checked: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick: false });\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      key={column.key}\n      className={clsx('rdg-cell', {\n        'rdg-cell-frozen': column.frozen,\n        'rdg-cell-frozen-last': column.isLastFrozenColumn,\n        'rdg-cell-selected': isCellSelected\n      })}\n      style={{\n        width: column.width,\n        left: column.left,\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n    >\n      {column.groupFormatter && (!column.rowGroup || groupColumnIndex === column.idx) && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          isRowSelected={isRowSelected}\n          onRowSelectionChange={onRowSelectionChange}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, Position, SelectRowEvent, Omit } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\n\nexport interface GroupRowRendererProps<R, SR = unknown> extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  top: number;\n  level: number;\n  selectedCellIdx?: number;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectCell: (position: Position, enableEditor?: boolean) => void;\n  selectRow: (selectRowEvent: SelectRowEvent) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  top,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  selectRow,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function selectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-level={level}\n      aria-expanded={isExpanded}\n      className={clsx(\n        'rdg-row',\n        'rdg-group-row',\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n          'rdg-row-selected': isRowSelected,\n          'rdg-group-row-selected': selectedCellIdx === -1 // Select row if there is no selected cell\n        })}\n      onClick={selectGroup}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <GroupCell<R, SR>\n          key={column.key}\n          id={id}\n          rowIdx={rowIdx}\n          groupKey={groupKey}\n          childRows={childRows}\n          isExpanded={isExpanded}\n          isRowSelected={isRowSelected}\n          isCellSelected={selectedCellIdx === column.idx}\n          column={column}\n          groupColumnIndex={idx}\n          selectRow={selectRow}\n          toggleGroup={toggleGroup}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CellRendererProps } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'column'>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  row\n}: SummaryCellProps<R, SR>) {\n  const { summaryFormatter: SummaryFormatter, width, left, summaryCellClass } = column;\n  const className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      className={className}\n      style={{ width, left }}\n    >\n      {SummaryFormatter && <SummaryFormatter column={column} row={row} />}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport SummaryCell from './SummaryCell';\nimport type { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>,\n  | 'viewportColumns'\n  | 'rowIdx'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n}\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={`rdg-row rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'} rdg-summary-row`}\n      style={{ bottom }}\n    >\n      {viewportColumns.map(column => (\n        <SummaryCell<R, SR>\n          key={column.key}\n          column={column}\n          row={row}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useImperativeHandle,\n  useCallback,\n} from \"react\";\nimport clsx from \"clsx\";\n\nimport {\n  useGridDimensions,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n} from \"./hooks\";\nimport HeaderRow from \"./HeaderRow\";\nimport FilterRow from \"./FilterRow\";\nimport Row from \"./Row\";\nimport GroupRowRenderer from \"./GroupRow\";\nimport SummaryRow from \"./SummaryRow\";\nimport {\n  assertIsValidKeyGetter,\n  getColumnScrollPosition,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n} from \"./utils\";\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Filters,\n  Position,\n  RowRendererProps,\n  SelectRowEvent,\n  SelectedCellProps,\n  EditCellProps,\n  FillEvent,\n  PasteEvent,\n} from \"./types\";\nimport type { CellNavigationMode, SortDirection } from \"./enums\";\n\ninterface SelectCellState extends Position {\n  mode: \"SELECT\";\n}\n\ninterface EditCellState<R> extends Position {\n  mode: \"EDIT\";\n  row: R;\n  originalRow: R;\n  key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  \"formatter\" | \"minWidth\" | \"resizable\" | \"sortable\"\n>;\n\nexport interface DataGridHandle {\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n  deselectCell: () => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  \"aria-label\" | \"aria-labelledby\" | \"aria-describedby\" | \"className\" | \"style\"\n>;\n\nexport interface DataGridProps<R, SR = unknown> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: (row: R) => React.Key;\n  onRowsChange?: (rows: R[]) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<React.Key>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<React.Key>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Filters;\n  onFiltersChange?: (filters: Filters) => void;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR>;\n  groupBy?: readonly string[];\n  rowGrouper?: (\n    rows: readonly R[],\n    columnKey: string\n  ) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange?: (expandedGroupIds: Set<unknown>) => void;\n  onFill?: (event: FillEvent<R>) => R[];\n  onPaste?: (event: PasteEvent<R>) => R;\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  emptyRowsRenderer?: React.ComponentType;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (\n    rowIdx: number,\n    row: R,\n    column: CalculatedColumn<R, SR>\n  ) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilterRow?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n  rowClass?: (row: R) => string | undefined;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight = 35,\n    headerRowHeight = rowHeight,\n    headerFiltersHeight = 45,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumn,\n    sortDirection,\n    onSort,\n    filters,\n    onFiltersChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Custom renderers\n    rowRenderer: RowRenderer = Row,\n    emptyRowsRenderer: EmptyRowsRenderer,\n    // Event props\n    onRowClick,\n    onScroll,\n    onColumnResize,\n    onSelectedCellChange,\n    onFill,\n    onPaste,\n    // Toggles and modes\n    enableFilterRow = false,\n    cellNavigationMode = \"NONE\",\n    // Miscellaneous\n    editorPortalTarget = document.body,\n    className,\n    style,\n    rowClass,\n    // ARIA\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n  }: DataGridProps<R, SR>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(\n    () => new Map()\n  );\n  const [selectedPosition, setSelectedPosition] = useState<\n    SelectCellState | EditCellState<R>\n  >({ idx: -1, rowIdx: -1, mode: \"SELECT\" });\n  const [copiedCell, setCopiedCell] = useState<{\n    row: R;\n    columnKey: string;\n  } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(\n    undefined\n  );\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const isCellFocusable = useRef(false);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowWrapper = useLatestFunc(selectRow);\n  const selectCellWrapper = useLatestFunc(selectCell);\n  const toggleGroupWrapper = useLatestFunc(toggleGroup);\n  const handleFormatterRowChangeWrapper = useLatestFunc(\n    handleFormatterRowChange\n  );\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = enableFilterRow ? 2 : 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const totalHeaderHeight =\n    headerRowHeight + (enableFilterRow ? headerFiltersHeight : 0);\n  const clientHeight =\n    gridHeight - totalHeaderHeight - summaryRowsCount * rowHeight;\n  const isSelectable =\n    selectedRows !== undefined && onSelectedRowsChange !== undefined;\n\n  const {\n    columns,\n    viewportColumns,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy,\n  } = useViewportColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    isGroupRow,\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n  });\n\n  const hasGroups = groupBy.length > 0 && rowGrouper;\n  const minColIdx = hasGroups ? -1 : 0;\n\n  // Cell drag is not supported on a treegrid\n  const enableCellDragAndDrop = hasGroups ? false : onFill !== undefined;\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      selectedPosition === prevSelectedPosition.current ||\n      selectedPosition.mode === \"EDIT\" ||\n      !isCellWithinBounds(selectedPosition)\n    )\n      return;\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (isCellFocusable.current) {\n      isCellFocusable.current = false;\n      return;\n    }\n    focusSinkRef.current!.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: rowIdx * rowHeight,\n        behavior: \"smooth\",\n      });\n    },\n    selectCell,\n    deselectCell,\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number) => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(column.key, width);\n      setColumnWidths(newColumnWidths);\n\n      onColumnResize?.(column.idx, width);\n    },\n    [columnWidths, onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ rowIdx, checked, isShiftClick }: SelectRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    const row = rows[rowIdx];\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = Math.sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, keyCode } = event;\n    const row = rows[selectedPosition.rowIdx];\n\n    if (\n      onPaste &&\n      isCtrlKeyHeldDown(event) &&\n      isCellWithinBounds(selectedPosition) &&\n      !isGroupRow(row) &&\n      selectedPosition.idx !== -1 &&\n      selectedPosition.mode === \"SELECT\"\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isCellWithinBounds(selectedPosition) &&\n      isGroupRow(row) &&\n      selectedPosition.idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((key === \"ArrowLeft\" && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (key === \"ArrowRight\" && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case \"Escape\":\n        setCopiedCell(null);\n        closeEditor();\n        return;\n      case \"ArrowUp\":\n      case \"ArrowDown\":\n      case \"ArrowLeft\":\n      case \"ArrowRight\":\n      case \"Tab\":\n      case \"Home\":\n      case \"End\":\n      case \"PageUp\":\n      case \"PageDown\":\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isCellFocusable.current = true;\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor === undefined ||\n      selectedPosition.mode === \"SELECT\" ||\n      selectedPosition.row === selectedPosition.originalRow\n    ) {\n      return;\n    }\n\n    const updatedRows = [...rawRows];\n    updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = selectedPosition.row;\n    onRowsChange?.(updatedRows);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    setCopiedCell({\n      row: rawRows[getRawRowIdx(rowIdx)],\n      columnKey: columns[idx].key,\n    });\n  }\n\n  function handlePaste() {\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n    if (\n      !onPaste ||\n      !onRowsChange ||\n      copiedCell === null ||\n      !isCellEditable(selectedPosition)\n    ) {\n      return;\n    }\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key,\n    });\n\n    const updatedRows = [...rawRows];\n    updatedRows[rowIdx] = updatedTargetRow;\n\n    onRowsChange(updatedRows);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition)) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key } = event;\n    const column = columns[selectedPosition.idx];\n\n    if (selectedPosition.mode === \"EDIT\") {\n      if (key === \"Enter\") {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: \"EDIT\",\n        row,\n        originalRow: row,\n      }));\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined || !onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    const targetRows = rawRows.slice(startRowIndex, endRowIndex);\n\n    const updatedTargetRows = onFill({\n      columnKey: columns[idx].key,\n      sourceRow,\n      targetRows,\n    });\n    const updatedRows = [...rawRows];\n    for (let i = startRowIndex; i < endRowIndex; i++) {\n      updatedRows[i] = updatedTargetRows[i - startRowIndex];\n    }\n    onRowsChange(updatedRows);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleMouseDown(\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener(\"mouseover\", onMouseOver);\n    window.addEventListener(\"mouseup\", onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener(\"mouseover\", onMouseOver);\n      window.removeEventListener(\"mouseup\", onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    if (!onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const targetRows = rawRows.slice(rowIdx + 1);\n\n    const updatedTargetRows = onFill({\n      columnKey: columns[idx].key,\n      sourceRow,\n      targetRows,\n    });\n    const updatedRows = [...rawRows];\n    for (let i = rowIdx + 1; i < updatedRows.length; i++) {\n      updatedRows[i] = updatedTargetRows[i - rowIdx - 1];\n    }\n    onRowsChange(updatedRows);\n  }\n\n  function handleFormatterRowChange(rowIdx: number, row: Readonly<R>) {\n    const newRows = [...rawRows];\n    newRows[rowIdx] = row;\n    onRowsChange?.(newRows);\n  }\n\n  function handleEditorRowChange(row: Readonly<R>, commitChanges?: boolean) {\n    if (selectedPosition.mode === \"SELECT\") return;\n    if (commitChanges) {\n      const updatedRows = [...rawRows];\n      updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = row;\n      onRowsChange?.(updatedRows);\n      closeEditor();\n    } else {\n      setSelectedPosition((position) => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return (\n      rowIdx >= 0 &&\n      rowIdx < rows.length &&\n      idx >= minColIdx &&\n      idx < columns.length\n    );\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinBounds(position) &&\n      isSelectedCellEditable<R, SR>({\n        columns,\n        rows,\n        selectedPosition: position,\n        isGroupRow,\n      })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor = false): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({\n        ...position,\n        mode: \"EDIT\",\n        key: null,\n        row,\n        originalRow: row,\n      });\n    } else {\n      setSelectedPosition({ ...position, mode: \"SELECT\" });\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function deselectCell(): void {\n    setSelectedPosition({ idx: -1, rowIdx: -1, mode: \"SELECT\" });\n    // setCopiedPosition(null);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === \"SELECT\") return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: \"SELECT\" }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === \"number\" && idx > lastFrozenColumnIndex) {\n      const { clientWidth } = current;\n      const { left, width } = columns[idx];\n      const isCellAtLeftBoundary =\n        left < scrollLeft + width + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = left + width > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary || isCellAtRightBoundary) {\n        const newScrollLeft = getColumnScrollPosition(\n          columns,\n          idx,\n          scrollLeft,\n          clientWidth\n        );\n        current.scrollLeft = scrollLeft + newScrollLeft;\n      }\n    }\n\n    if (typeof rowIdx === \"number\") {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(\n    key: string,\n    ctrlKey: boolean,\n    shiftKey: boolean\n  ): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === \"ArrowLeft\" &&\n      isRowSelected &&\n      isGroupRow(row) &&\n      !row.isExpanded &&\n      row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case \"ArrowUp\":\n        return { idx, rowIdx: rowIdx - 1 };\n      case \"ArrowDown\":\n        return { idx, rowIdx: rowIdx + 1 };\n      case \"ArrowLeft\":\n        return { idx: idx - 1, rowIdx };\n      case \"ArrowRight\":\n        return { idx: idx + 1, rowIdx };\n      case \"Tab\":\n        if (selectedPosition.idx === -1 && selectedPosition.rowIdx === -1) {\n          return shiftKey\n            ? { idx: columns.length - 1, rowIdx: rows.length - 1 }\n            : { idx: 0, rowIdx: 0 };\n        }\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case \"Home\":\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case \"End\":\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey\n          ? { idx: columns.length - 1, rowIdx: rows.length - 1 }\n          : { idx: columns.length - 1, rowIdx };\n      case \"PageUp\":\n        return { idx, rowIdx: rowIdx - Math.floor(clientHeight / rowHeight) };\n      case \"PageDown\":\n        return { idx, rowIdx: rowIdx + Math.floor(clientHeight / rowHeight) };\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === \"EDIT\") {\n      const onNavigation =\n        columns[selectedPosition.idx].editorOptions?.onNavigation ??\n        onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    let nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    let mode = cellNavigationMode;\n    if (key === \"Tab\") {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          columns,\n          rowsCount: rows.length,\n          selectedPosition,\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === \"NONE\" ? \"CHANGE_ROW\" : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    nextPosition = getNextSelectedCellPosition<R, SR>({\n      columns,\n      rowsCount: rows.length,\n      cellNavigationMode: mode,\n      nextPosition,\n    });\n\n    selectCell(nextPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getSelectedCellProps(\n    rowIdx: number\n  ): SelectedCellProps | EditCellProps<R> | undefined {\n    if (selectedPosition.rowIdx !== rowIdx) return;\n\n    if (selectedPosition.mode === \"EDIT\") {\n      return {\n        mode: \"EDIT\",\n        idx: selectedPosition.idx,\n        onKeyDown: handleKeyDown,\n        editorProps: {\n          editorPortalTarget,\n          rowHeight,\n          row: selectedPosition.row,\n          onRowChange: handleEditorRowChange,\n          onClose: handleOnClose,\n        },\n      };\n    }\n\n    return {\n      mode: \"SELECT\",\n      idx: selectedPosition.idx,\n      onFocus: handleFocus,\n      onKeyDown: handleKeyDown,\n      dragHandleProps:\n        enableCellDragAndDrop && isCellEditable(selectedPosition)\n          ? { onMouseDown: handleMouseDown, onDoubleClick: handleDoubleClick }\n          : undefined,\n    };\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    for (\n      let rowIdx = rowOverscanStartIdx;\n      rowIdx <= rowOverscanEndIdx;\n      rowIdx++\n    ) {\n      const row = rows[rowIdx];\n      const top = rowIdx * rowHeight + totalHeaderHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        rowElements.push(\n          <GroupRowRenderer<R, SR>\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={viewportColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            top={top}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={\n              selectedPosition.rowIdx === rowIdx\n                ? selectedPosition.idx\n                : undefined\n            }\n            isRowSelected={\n              isSelectable &&\n              row.childRows.every((cr) => selectedRows?.has(rowKeyGetter!(cr)))\n            }\n            onFocus={\n              selectedPosition.rowIdx === rowIdx ? handleFocus : undefined\n            }\n            onKeyDown={\n              selectedPosition.rowIdx === rowIdx ? handleKeyDown : undefined\n            }\n            selectCell={selectCellWrapper}\n            selectRow={selectRowWrapper}\n            toggleGroup={toggleGroupWrapper}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key: React.Key = hasGroups ? startRowIndex : rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === \"function\") {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={\n            headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1\n          } // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={viewportColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          rowClass={rowClass}\n          top={top}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          selectedCellProps={getSelectedCellProps(rowIdx)}\n          onRowChange={handleFormatterRowChangeWrapper}\n          selectCell={selectCellWrapper}\n          selectRow={selectRowWrapper}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (\n    selectedPosition.idx >= columns.length ||\n    selectedPosition.rowIdx >= rows.length\n  ) {\n    setSelectedPosition({ idx: -1, rowIdx: -1, mode: \"SELECT\" });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (\n    selectedPosition.mode === \"EDIT\" &&\n    rows[selectedPosition.rowIdx] !== selectedPosition.originalRow\n  ) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? \"treegrid\" : \"grid\"}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        \"rdg\",\n        { \"rdg-viewport-dragging\": isDragging },\n        className\n      )}\n      style={\n        ({\n          ...style,\n          \"--header-row-height\": `${headerRowHeight}px`,\n          \"--filter-row-height\": `${headerFiltersHeight}px`,\n          \"--row-width\": `${totalColumnWidth}px`,\n          \"--row-height\": `${rowHeight}px`,\n        } as unknown) as React.CSSProperties\n      }\n      ref={gridRef}\n      onScroll={handleScroll}\n    >\n      <HeaderRow<R, SR>\n        rowKeyGetter={rowKeyGetter}\n        rows={rawRows}\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={selectedRows?.size === rawRows.length}\n        onSelectedRowsChange={onSelectedRowsChange}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={onSort}\n      />\n      {enableFilterRow && (\n        <FilterRow<R, SR>\n          columns={viewportColumns}\n          filters={filters}\n          onFiltersChange={onFiltersChange}\n        />\n      )}\n      {rows.length === 0 && EmptyRowsRenderer ? (\n        <EmptyRowsRenderer />\n      ) : (\n        <>\n          <div\n            ref={focusSinkRef}\n            tabIndex={0}\n            className=\"rdg-focus-sink\"\n            onKeyDown={handleKeyDown}\n          />\n          <div\n            style={{ height: Math.max(rows.length * rowHeight, clientHeight) }}\n          />\n          {getViewportRows()}\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow<R, SR>\n              aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={rowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown>(\n  props: DataGridProps<R, SR> & React.RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import type { EditorProps } from '../types';\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow = unknown>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className=\"rdg-text-editor\"\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={event => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["useCombinedRefs","refs","useCallback","handle","ref","current","useClickOutside","onClick","frameRequestRef","useRef","cancelAnimationFrameRequest","cancelAnimationFrame","undefined","onClickRef","Error","useEffect","onOutsideClick","onWindowCaptureClick","requestAnimationFrame","window","addEventListener","capture","removeEventListener","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","useLayoutEffect","ResizeObserver","resizeObserver","entries","width","height","contentRect","observe","disconnect","useFocusRef","isCellSelected","focus","preventScroll","SelectCellFormatter","value","tabIndex","disabled","onChange","ariaLabel","ariaLabelledBy","inputRef","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","_jsx","ValueFormatter","props","row","column","key","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","cellRef","handleKeyDown","d","stopPropagation","event","wrapEvent","ourHandler","theirHandler","SELECT_COLUMN_KEY","SelectColumn","name","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","isRowSelected","onRowSelectionChange","groupFormatter","useViewportColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","columns","lastFrozenColumnIndex","totalColumnWidth","totalFrozenColumnWidth","groupBy","useMemo","left","totalWidth","allocatedWidths","unassignedColumnsCount","map","metricsColumn","getSpecifiedWidth","clampColumnWidth","includes","rowGroup","sort","aKey","frozenA","bKey","frozenB","indexOf","unallocatedWidth","unallocatedColumnWidth","Math","max","floor","calculatedColumns","idx","newColumn","push","lastFrozenColumn","isLastFrozenColumn","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","length","firstUnfrozenColumnIdx","min","colVisibleStartIdx","colVisibleEndIdx","viewportColumns","colIdx","has","get","test","parseInt","RENDER_BACTCH_SIZE","useViewportRows","rawRows","rowHeight","clientHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","rows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","childGroups","childRowsCount","allGroupRows","Set","flattenedRows","expandGroup","parentId","level","Array","isArray","keys","forEach","posInSet","id","groupRow","setSize","add","isGroupRow","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","rowOverscanStartIdx","rowOverscanEndIdx","ceil","useLatestFunc","fn","args","SORT_TEXT","ASC","DESC","NONE","SortableHeaderCell","onSort","sortColumn","sortDirection","children","sortDescendingFirst","direction","getAriaSort","HeaderCell","onResize","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","offset","clientX","onPointerMove","onPointerUp","preventDefault","getCell","className","clsx","headerCellClass","style","getColumnScrollPosition","currentScrollLeft","currentClientWidth","i","selectedColumn","scrollRight","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","nonInputKeys","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","isSelectedCellEditable","selectedPosition","rowIdx","editor","editable","getNextSelectedCellPosition","cellNavigationMode","nextPosition","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","assertIsValidKeyGetter","keyGetter","HeaderRow","rowKeyGetter","onSelectedRowsChange","onColumnResize","handleAllRowsSelectionChange","newSelectedRows","memo","FilterRow","filters","onFiltersChange","newFilters","filterRenderer","Cell","isCopied","isDraggedOver","dragHandleProps","onRowClick","onDoubleClick","onContextMenu","onRowChange","selectCell","selectRow","cellClass","selectCellWrapper","openEditor","handleClick","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","handleRowChange","newRow","isShiftClick","forwardRef","EditorContainer","onClickCapture","createPortal","editorPortalTarget","EditCell","editorProps","dimensions","setDimensions","node","top","getCellContent","docTop","docLeft","document","scrollingElement","documentElement","gridLeft","gridTop","Row","cellRenderer","CellRenderer","copiedCellIdx","draggedOverCellIdx","selectedCellProps","rowClass","setDraggedOverRowIdx","onMouseEnter","ariaRowIndex","ariaSelected","handleDragEnter","mode","onKeyDown","onFocus","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","GroupedRow","selectedCellIdx","selectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","SummaryRow","bottom","DataGrid","summaryRows","onRowsChange","headerRowHeight","headerFiltersHeight","selectedRows","onExpandedGroupIdsChange","rowRenderer","RowRenderer","emptyRowsRenderer","EmptyRowsRenderer","onScroll","onSelectedCellChange","onFill","onPaste","enableFilterRow","body","ariaDescribedBy","setScrollTop","setScrollLeft","setColumnWidths","Map","setSelectedPosition","copiedCell","setCopiedCell","isDragging","setDragging","draggedOverRowIdx","setOverRowIdx","focusSinkRef","prevSelectedPosition","latestDraggedOverRowIdx","lastSelectedRowIdx","isCellFocusable","selectRowWrapper","handleFormatterRowChangeWrapper","handleFormatterRowChange","headerRowsCount","summaryRowsCount","totalHeaderHeight","isSelectable","hasGroups","minColIdx","enableCellDragAndDrop","isCellWithinBounds","scrollToCell","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","deselectCell","handleColumnResize","newColumnWidths","set","childRow","rowKey","delete","previousRowIdx","step","sign","expandedGroupId","newExpandedGroupIds","keyCode","cKey","vKey","handleCopy","handlePaste","closeEditor","navigate","handleCellInput","handleFocus","handleScroll","getRawRowIdx","commitEditorChanges","originalRow","updatedRows","columnKey","targetRow","isCellEditable","updatedTargetRow","sourceRow","sourceColumnKey","targetColumnKey","onCellKeyDown","isDefaultPrevented","handleDragEnd","overRowIdx","endRowIndex","targetRows","slice","updatedTargetRows","handleMouseDown","onMouseOver","onMouseUp","newRows","handleEditorRowChange","commitChanges","position","handleOnClose","enableEditor","clientWidth","isCellAtLeftBoundary","isCellAtRightBoundary","newScrollLeft","getNextPosition","parentRowIdx","parentRow","onNavigation","getDraggedOverCellIdx","currentRowIdx","getSelectedCellProps","onClose","onMouseDown","getViewportRows","rowElements","every","cr","findIndex","c","size","autoFocusAndSelect","input","select","TextEditor"],"mappings":"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"}